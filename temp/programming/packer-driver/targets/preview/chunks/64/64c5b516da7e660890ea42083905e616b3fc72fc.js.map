{"version":3,"sources":["file:///C:/Users/Administrator/MahjongDenfense/assets/scripts/GameManager.ts"],"names":["_decorator","Component","Prefab","Sprite","SpriteFrame","instantiate","Vec3","resources","log","find","MahjongTile","ccclass","property","GameManager","tiles","gridNodes","gridNodeMap","Map","onLoad","gridsNode","children","length","loadTileSprites","then","initTiles","catch","err","Promise","resolve","reject","loadDir","frames","tileSprites","tilePrefab","i","gridNode","tile","sprite","getComponent","spriteFrame","gridWorldPos","getWorldPosition","setWorldPosition","tileScript","setGameManager","node","setGridNodes","set","push","shuffleTiles","dealTiles","j","Math","floor","random","pop","name","setParent","setPosition","ZERO","originalPosition","position"],"mappings":"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","sourcesContent":["import { _decorator, Component, Prefab, Node, Sprite, SpriteFrame, instantiate, Vec3, resources, log, find } from 'cc';\r\nimport { MahjongTile } from './MahjongTile';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameManager')\r\nexport class GameManager extends Component {\r\n    @property(Prefab)\r\n    tilePrefab: Prefab = null;\r\n\r\n    @property([SpriteFrame])\r\n    tileSprites: SpriteFrame[] = [];\r\n\r\n    private tiles: Node[] = [];\r\n    public gridNodes: Node[] = [];\r\n    public gridNodeMap: Map<Node, Node> = new Map();\r\n\r\n    onLoad() {\r\n        log('GameManager onLoad');\r\n\r\n        // 获取 Grids 节点\r\n        const gridsNode = find('Canvas/Grids');\r\n        if (gridsNode) {\r\n            this.gridNodes = gridsNode.children;\r\n            log(`Found ${this.gridNodes.length} grids`);\r\n        } else {\r\n            log('Grids node not found');\r\n        }\r\n\r\n        this.loadTileSprites().then(() => {\r\n            this.initTiles();\r\n        }).catch((err) => {\r\n            log(`Error loading tile sprites: ${err}`);\r\n        });\r\n    }\r\n\r\n    async loadTileSprites() {\r\n        return new Promise<void>((resolve, reject) => {\r\n            resources.loadDir('output', SpriteFrame, (err, frames) => {\r\n                if (err) {\r\n                    reject(err);\r\n                    return;\r\n                }\r\n                if (frames.length === 0) {\r\n                    reject('No tile sprites found');\r\n                    return;\r\n                }\r\n                this.tileSprites = frames;\r\n                log(`Loaded ${frames.length} tile sprites`);\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    initTiles() {\r\n        log('Initializing tiles');\r\n        if (!this.tilePrefab) {\r\n            log('Error: tilePrefab is null');\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this.gridNodes.length; i++) {\r\n            const gridNode = this.gridNodes[i];\r\n\r\n            // 创建麻将并设置精灵\r\n            const tile = instantiate(this.tilePrefab);\r\n            const sprite = tile.getComponent(Sprite);\r\n            sprite.spriteFrame = this.tileSprites[i % this.tileSprites.length];\r\n\r\n            // 使用世界坐标初始化麻将的位置\r\n            const gridWorldPos = gridNode.getWorldPosition();\r\n            tile.setWorldPosition(gridWorldPos);\r\n\r\n            // 初始化 MahjongTile 脚本\r\n            const tileScript = tile.getComponent(MahjongTile);\r\n            tileScript.setGameManager(this.node);\r\n            tileScript.setGridNodes(this.gridNodes);\r\n\r\n            // 记录到 gridNodeMap\r\n            this.gridNodeMap.set(gridNode, tile);\r\n\r\n            this.tiles.push(tile);\r\n        }\r\n        this.shuffleTiles();\r\n        this.dealTiles();\r\n    }\r\n\r\n    shuffleTiles() {\r\n        log('Shuffling tiles');\r\n        for (let i = this.tiles.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [this.tiles[i], this.tiles[j]] = [this.tiles[j], this.tiles[i]];\r\n        }\r\n    }\r\n\r\n    dealTiles() {\r\n        log('Dealing tiles');\r\n        \r\n        for (let i = 0; i < 13; i++) {\r\n            let tile = this.tiles.pop();\r\n            const sprite = tile.getComponent(Sprite);\r\n            if (!tile) {\r\n                log(`Error: Tile is null at index ${i}`);\r\n                continue;\r\n            }\r\n            let gridNode = this.gridNodes[i];\r\n            log(`Dealing tile ${tile.getComponent(Sprite).spriteFrame.name} to grid ${gridNode.name}`);\r\n            tile.setParent(gridNode, true);\r\n            tile.setPosition(Vec3.ZERO);\r\n\r\n            // 保存每个麻将的初始位置\r\n            tile.getComponent(MahjongTile).originalPosition.set(tile.position);\r\n        }\r\n    }\r\n\r\n}"]}