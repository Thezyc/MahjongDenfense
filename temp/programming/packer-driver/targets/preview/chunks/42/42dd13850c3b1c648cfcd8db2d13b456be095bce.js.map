{"version":3,"sources":["file:///C:/Users/Administrator/MiaoMiaoMaJiang/assets/scripts/MahjongGame.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Sprite","SpriteFrame","ccclass","property","TileType","MahjongGame","type","allTiles","currentHand","selectedTiles","start","initializeTiles","value","i","push","spriteFrame","tileSprites","shuffleTiles","length","j","Math","floor","random","dealTiles","clearCurrentHand","tileNode","tilePrefab","tileData","sprite","getComponent","setParent","node","getChildByName","on","EventType","TOUCH_END","onTileSelected","arrangeTiles","startX","spacing","forEach","tile","index","setPosition","event","target","highlight","includes","active","filter","t","checkTriplet","tilesData","map","isTriplet","removeMatchedTiles","tiles","destroy","checkWinCondition"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;;;;;;;;;OAE7D;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;;AAEzBS,MAAAA,Q,0BAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;eAAAA,Q;QAAAA,Q;;6BAeQC,W,WADZH,OAAO,CAAC,aAAD,C,UAGHC,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAER;AAAR,OAAD,C,UAGRK,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,CAACL,WAAD;AAAR,OAAD,C,2BANb,MACaI,WADb,SACiCT,SADjC,CAC2C;AAAA;AAAA;;AAAA;;AAAA;;AAAA,eAQ/BW,QAR+B,GAQD,EARC;AAAA,eAS/BC,WAT+B,GAST,EATS;AAAA,eAU/BC,aAV+B,GAUP,EAVO;AAAA;;AAYvCC,QAAAA,KAAK,GAAG;AACJ,eAAKC,eAAL;AACH,SAdsC,CAgBvC;;;AACAA,QAAAA,eAAe,GAAG;AACd;AACA,eAAK,IAAIL,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAG,CAA1B,EAA6BA,IAAI,EAAjC,EAAqC;AACjC,iBAAK,IAAIM,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAI,CAA7B,EAAgCA,KAAK,EAArC,EAAyC;AACrC,mBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,qBAAKN,QAAL,CAAcO,IAAd,CAAmB;AACfR,kBAAAA,IAAI,EAAEA,IADS;AAEfM,kBAAAA,KAAK,EAAEA,KAFQ;AAGfG,kBAAAA,WAAW,EAAE,KAAKC,WAAL,CAAiBV,IAAI,GAAG,CAAP,IAAYM,KAAK,GAAG,CAApB,CAAjB;AAHE,iBAAnB;AAKH;AACJ;AACJ,WAZa,CAcd;AACA;;AACH,SAjCsC,CAmCvC;;;AACAK,QAAAA,YAAY,GAAG;AACX,eAAK,IAAIJ,CAAC,GAAG,KAAKN,QAAL,CAAcW,MAAd,GAAuB,CAApC,EAAuCL,CAAC,GAAG,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AAC/C,gBAAMM,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBT,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,aAAC,KAAKN,QAAL,CAAcM,CAAd,CAAD,EAAmB,KAAKN,QAAL,CAAcY,CAAd,CAAnB,IAAuC,CAAC,KAAKZ,QAAL,CAAcY,CAAd,CAAD,EAAmB,KAAKZ,QAAL,CAAcM,CAAd,CAAnB,CAAvC;AACH;AACJ,SAzCsC,CA2CvC;;;AACAU,QAAAA,SAAS,GAAG;AACR,eAAKC,gBAAL,GADQ,CAGR;;AACA,eAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,gBAAMY,QAAQ,GAAG1B,WAAW,CAAC,KAAK2B,UAAN,CAA5B;AACA,gBAAMC,QAAQ,GAAG,KAAKpB,QAAL,CAAcM,CAAd,CAAjB;AAEA,gBAAMe,MAAM,GAAGH,QAAQ,CAACI,YAAT,CAAsB7B,MAAtB,CAAf;AACA4B,YAAAA,MAAM,CAACb,WAAP,GAAqBY,QAAQ,CAACZ,WAA9B;AAEAU,YAAAA,QAAQ,CAACK,SAAT,CAAmB,KAAKC,IAAL,CAAUC,cAAV,CAAyB,UAAzB,CAAnB;AACAP,YAAAA,QAAQ,CAACQ,EAAT,CAAYpC,IAAI,CAACqC,SAAL,CAAeC,SAA3B,EAAsC,KAAKC,cAA3C,EAA2D,IAA3D;AAEA,iBAAK5B,WAAL,CAAiBM,IAAjB,CAAsBW,QAAtB;AACH;;AAED,eAAKY,YAAL;AACH,SA9DsC,CAgEvC;;;AACAA,QAAAA,YAAY,GAAG;AACX,cAAMC,MAAM,GAAG,CAAC,GAAhB;AACA,cAAMC,OAAO,GAAG,GAAhB;AACA,eAAK/B,WAAL,CAAiBgC,OAAjB,CAAyB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtCD,YAAAA,IAAI,CAACE,WAAL,CAAiBL,MAAM,GAAGC,OAAO,GAAGG,KAApC,EAA2C,CAA3C;AACH,WAFD;AAGH,SAvEsC,CAyEvC;;;AACAN,QAAAA,cAAc,CAACQ,KAAD,EAAe;AACzB,cAAMnB,QAAQ,GAAGmB,KAAK,CAACC,MAAvB;AACA,cAAMC,SAAS,GAAGrB,QAAQ,CAACO,cAAT,CAAwB,iBAAxB,CAAlB;;AAEA,cAAI,KAAKvB,aAAL,CAAmBsC,QAAnB,CAA4BtB,QAA5B,CAAJ,EAA2C;AACvC;AACAqB,YAAAA,SAAS,CAACE,MAAV,GAAmB,KAAnB;AACA,iBAAKvC,aAAL,GAAqB,KAAKA,aAAL,CAAmBwC,MAAnB,CAA0BC,CAAC,IAAIA,CAAC,KAAKzB,QAArC,CAArB;AACH,WAJD,MAIO;AACH;AACAqB,YAAAA,SAAS,CAACE,MAAV,GAAmB,IAAnB;AACA,iBAAKvC,aAAL,CAAmBK,IAAnB,CAAwBW,QAAxB;;AAEA,gBAAI,KAAKhB,aAAL,CAAmBS,MAAnB,KAA8B,CAAlC,EAAqC;AACjC,mBAAKiC,YAAL;AACH;AACJ;AACJ,SA3FsC,CA6FvC;;;AACAA,QAAAA,YAAY,GAAG;AACX,cAAMC,SAAS,GAAG,KAAK3C,aAAL,CAAmB4C,GAAnB,CAAuBZ,IAAI,IAAI;AAC7C;AACH,WAFiB,CAAlB;;AAIA,cAAI,KAAKa,SAAL,CAAeF,SAAf,CAAJ,EAA+B;AAC3B;AACA,iBAAKG,kBAAL;AACA,iBAAK9C,aAAL,GAAqB,EAArB;AACH;AACJ,SAxGsC,CA0GvC;;;AACA6C,QAAAA,SAAS,CAACE,KAAD,EAAoC;AACzC;AACA,iBAAO,IAAP;AACH,SA9GsC,CAgHvC;;;AACAD,QAAAA,kBAAkB,GAAG;AACjB,eAAK9C,aAAL,CAAmB+B,OAAnB,CAA2BC,IAAI,IAAI;AAC/BA,YAAAA,IAAI,CAACgB,OAAL;AACH,WAFD;AAGH,SArHsC,CAuHvC;;;AACAC,QAAAA,iBAAiB,GAAG;AAChB,cAAI,KAAKlD,WAAL,CAAiBU,MAAjB,KAA4B,CAAhC,EAAmC,CAC/B;AACH;AACJ;;AA5HsC,O;;;;;iBAGX,I;;;;;;;iBAGC,E","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Sprite, SpriteFrame } from 'cc';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nenum TileType {\r\n    Character,  // 万\r\n    Bamboo,     // 条\r\n    Dot,        // 筒\r\n    Wind,       // 风牌\r\n    Dragon      // 箭牌\r\n}\r\n\r\ninterface MahjongTileData {\r\n    type: TileType;\r\n    value: number;\r\n    spriteFrame: SpriteFrame;\r\n}\r\n\r\n@ccclass('MahjongGame')\r\nexport class MahjongGame extends Component {\r\n\r\n    @property({ type: Prefab })\r\n    tilePrefab: Prefab | null = null;\r\n\r\n    @property({ type: [SpriteFrame] })\r\n    tileSprites: SpriteFrame[] = [];\r\n\r\n    private allTiles: MahjongTileData[] = [];\r\n    private currentHand: Node[] = [];\r\n    private selectedTiles: Node[] = [];\r\n\r\n    start() {\r\n        this.initializeTiles();\r\n    }\r\n\r\n    // 初始化所有麻将牌\r\n    initializeTiles() {\r\n        // 创建万条筒（1-9 各4张）\r\n        for (let type = 0; type < 3; type++) {\r\n            for (let value = 1; value <= 9; value++) {\r\n                for (let i = 0; i < 4; i++) {\r\n                    this.allTiles.push({\r\n                        type: type,\r\n                        value: value,\r\n                        spriteFrame: this.tileSprites[type * 9 + (value - 1)]\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // 创建风牌和箭牌（各4张）\r\n        // ...类似逻辑...\r\n    }\r\n\r\n    // 洗牌\r\n    shuffleTiles() {\r\n        for (let i = this.allTiles.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [this.allTiles[i], this.allTiles[j]] = [this.allTiles[j], this.allTiles[i]];\r\n        }\r\n    }\r\n\r\n    // 发牌\r\n    dealTiles() {\r\n        this.clearCurrentHand();\r\n        \r\n        // 实例化136张牌中的14张（示例）\r\n        for (let i = 0; i < 14; i++) {\r\n            const tileNode = instantiate(this.tilePrefab);\r\n            const tileData = this.allTiles[i];\r\n            \r\n            const sprite = tileNode.getComponent(Sprite);\r\n            sprite.spriteFrame = tileData.spriteFrame;\r\n            \r\n            tileNode.setParent(this.node.getChildByName('TilePool'));\r\n            tileNode.on(Node.EventType.TOUCH_END, this.onTileSelected, this);\r\n            \r\n            this.currentHand.push(tileNode);\r\n        }\r\n        \r\n        this.arrangeTiles();\r\n    }\r\n\r\n    // 排列麻将牌\r\n    arrangeTiles() {\r\n        const startX = -500;\r\n        const spacing = 100;\r\n        this.currentHand.forEach((tile, index) => {\r\n            tile.setPosition(startX + spacing * index, 0);\r\n        });\r\n    }\r\n\r\n    // 牌被选中\r\n    onTileSelected(event: Event) {\r\n        const tileNode = event.target as Node;\r\n        const highlight = tileNode.getChildByName('SelectHighlight');\r\n        \r\n        if (this.selectedTiles.includes(tileNode)) {\r\n            // 取消选择\r\n            highlight.active = false;\r\n            this.selectedTiles = this.selectedTiles.filter(t => t !== tileNode);\r\n        } else {\r\n            // 选中\r\n            highlight.active = true;\r\n            this.selectedTiles.push(tileNode);\r\n            \r\n            if (this.selectedTiles.length === 3) {\r\n                this.checkTriplet();\r\n            }\r\n        }\r\n    }\r\n\r\n    // 检查是否组成刻子\r\n    checkTriplet() {\r\n        const tilesData = this.selectedTiles.map(tile => {\r\n            return /* 获取牌数据逻辑 */;\r\n        });\r\n\r\n        if (this.isTriplet(tilesData)) {\r\n            // 成功匹配\r\n            this.removeMatchedTiles();\r\n            this.selectedTiles = [];\r\n        }\r\n    }\r\n\r\n    // 判断是否刻子\r\n    isTriplet(tiles: MahjongTileData[]): boolean {\r\n        // 实现刻子判断逻辑\r\n        return true;\r\n    }\r\n\r\n    // 移除匹配的牌\r\n    removeMatchedTiles() {\r\n        this.selectedTiles.forEach(tile => {\r\n            tile.destroy();\r\n        });\r\n    }\r\n\r\n    // 检查胜利条件\r\n    checkWinCondition() {\r\n        if (this.currentHand.length === 0) {\r\n            // 显示胜利UI\r\n        }\r\n    }\r\n}"]}