{"version":3,"sources":["file:///C:/Users/Administrator/MahjongDenfense/assets/scripts/GameManager.ts"],"names":["_decorator","Component","Prefab","Node","Sprite","SpriteFrame","instantiate","Vec3","resources","log","UITransform","Button","Label","MahjongTile","HuPaiChecker","ccclass","property","GameManager","tiles","raisedTile","handTiles","handArea","huPaiChecker","onLoad","node","getChildByName","loadTileSprites","then","initTiles","catch","err","huButton","active","on","EventType","CLICK","onHuButtonClick","huResultPopup","schedule","spawnMonster","onDestroy","off","TOUCH_START","onScreenTouch","Promise","resolve","reject","loadDir","frames","length","tileSprites","i","tile","tilePrefab","sprite","getComponent","spriteFrame","tileScript","setGameManager","push","shuffleTiles","dealTiles","j","Math","floor","random","pop","setParent","drawTile","updateHandTiles","sortHandTiles","tileWidth","width","setPosition","originalPosition","set","position","setSiblingIndex","handTilesLog","map","name","join","checkHu","lastTile","sort","a","b","spriteA","spriteB","localeCompare","raiseTile","lower","raise","discardTile","filter","t","removeFromParent","tileCounts","feng","Array","fill","jian","wan","tong","tiao","forEach","spriteFrameName","parts","split","type","number","parseInt","JSON","stringify","setTiles","isHu","huResultLabel","getComponentInChildren","string","event","monster","monsterPrefab","parent","uiTransform","cc","winSize","height"],"mappings":"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","sourcesContent":["import { _decorator, Component, Prefab, Node, Sprite, SpriteFrame, instantiate, Vec3, resources, log, UITransform, EventTouch, Button, Label } from 'cc';\r\nimport { MahjongTile } from './MahjongTile';\r\nimport { HuPaiChecker } from './HuPaiChecker';\r\nimport Monster from './Monster'; // 引入Monster类\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameManager')\r\nexport class GameManager extends Component {\r\n    @property(Prefab)\r\n    tilePrefab: Prefab = null;\r\n\r\n    @property([SpriteFrame])\r\n    tileSprites: SpriteFrame[] = [];\r\n\r\n    @property(Node)\r\n    huButton: Node = null; // 胡牌按钮\r\n\r\n    @property(Node)\r\n    huResultPopup: Node = null; // 计分窗口\r\n\r\n    @property(Prefab)\r\n    monsterPrefab: Prefab = null; // 怪物预制资源\r\n\r\n    private tiles: Node[] = [];\r\n    private raisedTile: Node = null;\r\n    private handTiles: Node[] = [];\r\n    private handArea: Node = null;\r\n    private huPaiChecker: HuPaiChecker = new HuPaiChecker();\r\n\r\n    onLoad() {\r\n        log('GameManager onLoad');\r\n        this.handArea = this.node.getChildByName('HandArea');\r\n        this.loadTileSprites().then(() => {\r\n            this.initTiles();\r\n        }).catch((err) => {\r\n            log(`Error loading tile sprites: ${err}`);\r\n        });\r\n\r\n        // 初始化胡牌按钮\r\n        this.huButton.active = false;\r\n        this.huButton.on(Button.EventType.CLICK, this.onHuButtonClick, this);\r\n\r\n        // 初始化计分窗口\r\n        this.huResultPopup.active = false;\r\n\r\n        // 定时生成怪物\r\n        this.schedule(this.spawnMonster, 2);\r\n    }\r\n\r\n    onDestroy() {\r\n        // 移除屏幕点击事件监听\r\n        this.node.off(Node.EventType.TOUCH_START, this.onScreenTouch, this);\r\n    }\r\n\r\n    async loadTileSprites() {\r\n        return new Promise<void>((resolve, reject) => {\r\n            resources.loadDir('output', SpriteFrame, (err, frames) => {\r\n                if (err) {\r\n                    reject(err);\r\n                    return;\r\n                }\r\n                if (frames.length === 0) {\r\n                    reject('No tile sprites found');\r\n                    return;\r\n                }\r\n                this.tileSprites = frames;\r\n                log(`Loaded ${frames.length} tile sprites`);\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    initTiles() {\r\n        log('Initializing tiles');\r\n        for (let i = 0; i < 136; i++) {\r\n            let tile = instantiate(this.tilePrefab);\r\n            if (!tile) {\r\n                log(`Error: Tile prefab instantiation failed at index ${i}`);\r\n                continue;\r\n            }\r\n            let sprite = tile.getComponent(Sprite);\r\n            if (!sprite) {\r\n                log(`Error: Sprite component not found on tile at index ${i}`);\r\n                continue;\r\n            }\r\n            sprite.spriteFrame = this.tileSprites[i % this.tileSprites.length];\r\n            let tileScript = tile.getComponent(MahjongTile);\r\n            if (tileScript) {\r\n                tileScript.setGameManager(this.node);\r\n            } else {\r\n                log(`Error: MahjongTile component not found on tilePrefab at index ${i}`);\r\n            }\r\n            this.tiles.push(tile);\r\n        }\r\n        this.shuffleTiles();\r\n        this.dealTiles();\r\n    }\r\n\r\n    shuffleTiles() {\r\n        log('Shuffling tiles');\r\n        for (let i = this.tiles.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [this.tiles[i], this.tiles[j]] = [this.tiles[j], this.tiles[i]];\r\n        }\r\n    }\r\n\r\n    dealTiles() {\r\n        log('Dealing tiles');\r\n        for (let i = 0; i < 13; i++) {\r\n            let tile = this.tiles.pop();\r\n            if (!tile) {\r\n                log(`Error: Tile is null at index ${i}`);\r\n                continue;\r\n            }\r\n            this.handTiles.push(tile);\r\n            tile.setParent(this.handArea, false);\r\n        }\r\n        this.drawTile(); // 摸一张牌，使手牌区有14张麻将\r\n        this.updateHandTiles();\r\n    }\r\n\r\n    updateHandTiles() {\r\n        this.sortHandTiles(); \r\n        const tileWidth = this.handArea.getComponent(UITransform).width / 14;\r\n        for (let i = 0; i < this.handTiles.length; i++) {\r\n            let tile = this.handTiles[i];\r\n            tile.setPosition(new Vec3(i * tileWidth - this.handArea.getComponent(UITransform).width / 2 + tileWidth / 2, 0, 0)); // 禁用自动位置更新\r\n            tile.active = true;\r\n            // 保存每个麻将的初始位置\r\n            tile.getComponent(MahjongTile).originalPosition.set(tile.position);\r\n            // 设置图层优先级\r\n            tile.setSiblingIndex(i);\r\n        }\r\n\r\n        // 输出当前手牌到日志\r\n        let handTilesLog = this.handTiles.map(tile => tile.getComponent(Sprite).spriteFrame.name).join(', ');\r\n        log(`Current hand tiles: ${handTilesLog}`);\r\n\r\n        this.checkHu();\r\n    }\r\n\r\n    sortHandTiles() {\r\n        // 确保最新摸到的麻将放在最右边\r\n        const lastTile = this.handTiles.pop();\r\n        this.handTiles.sort((a, b) => {\r\n            const spriteA = a.getComponent(Sprite).spriteFrame.name;\r\n            const spriteB = b.getComponent(Sprite).spriteFrame.name;\r\n            return spriteA.localeCompare(spriteB);\r\n        });\r\n        if (lastTile) {\r\n            this.handTiles.push(lastTile);\r\n        }\r\n    }\r\n\r\n    raiseTile(tile: Node) {\r\n        if (this.raisedTile && this.raisedTile !== tile) {\r\n            this.raisedTile.getComponent(MahjongTile).lower();\r\n        }\r\n        tile.getComponent(MahjongTile).raise();\r\n        this.raisedTile = tile;\r\n    }\r\n\r\n    discardTile(tile: Node) {\r\n        log(`Discarding tile: ${tile.name}`);\r\n        this.handTiles = this.handTiles.filter(t => t !== tile);\r\n        tile.removeFromParent();\r\n        this.raisedTile = null;\r\n        this.drawTile();\r\n        this.updateHandTiles(); // 更新手牌显示\r\n    }\r\n\r\n    drawTile() {\r\n        if (this.tiles.length > 0) {\r\n            let tile = this.tiles.pop();\r\n            this.handTiles.push(tile);\r\n            tile.setParent(this.handArea, false);\r\n            this.updateHandTiles();\r\n            log(`Drew new tile: ${tile.name}`);\r\n        } else {\r\n            log('No more tiles to draw');\r\n        }\r\n    }\r\n\r\n    checkHu() {\r\n        // 创建一个对象，表示所有可能的麻将牌\r\n        let tileCounts = {\r\n            feng: new Array(4).fill(0),\r\n            jian: new Array(3).fill(0),\r\n            wan: new Array(9).fill(0),\r\n            tong: new Array(9).fill(0),\r\n            tiao: new Array(9).fill(0),\r\n        };\r\n\r\n        // 获取当前手牌并转换为数字数组\r\n        this.handTiles.forEach(tile => {\r\n            let spriteFrameName = tile.getComponent(Sprite).spriteFrame.name;\r\n            let parts = spriteFrameName.split('_');\r\n            let type = parts[2];\r\n            let number = parseInt(parts[3]) - 1;\r\n            if (tileCounts[type]) {\r\n                tileCounts[type][number]++;\r\n            }\r\n        });\r\n\r\n        // 输出解析后的手牌统计信息到日志\r\n        log('Tile counts:', JSON.stringify(tileCounts));\r\n\r\n        // 设置胡牌检测器的手牌\r\n        this.huPaiChecker.setTiles(tileCounts);\r\n\r\n        // 检查是否胡牌\r\n        if (this.huPaiChecker.isHu()) {\r\n            log('Hu! You win!');\r\n            this.huButton.active = true; // 显示胡牌按钮\r\n        } else {\r\n            log('Not a Hu yet.');\r\n            this.huButton.active = false; // 隐藏胡牌按钮\r\n        }\r\n    }\r\n\r\n    onHuButtonClick() {\r\n        // 显示计分窗口\r\n        this.huResultPopup.active = true;\r\n\r\n        // 列出满足的番种（此处简单示例，可以根据实际需求列出具体番种）\r\n        let huResultLabel = this.huResultPopup.getComponentInChildren(Label);\r\n        huResultLabel.string = \"恭喜胡牌！\\n番种：XX番，YY番\";\r\n    }\r\n\r\n    onScreenTouch(event: EventTouch) {\r\n        // 如果点击的不是麻将牌，则放下所有抬起的麻将牌\r\n        if (this.raisedTile) {\r\n            this.raisedTile.getComponent(MahjongTile).lower();\r\n            this.raisedTile = null;\r\n        }\r\n    }\r\n\r\n    spawnMonster() {\r\n        const monster = instantiate(this.monsterPrefab);\r\n        // if (monster) {\r\n        //     log('Monster instantiated successfully.');\r\n        // } else {\r\n        //     log('Failed to instantiate monster.');\r\n        // }\r\n        monster.parent = this.node;\r\n        // 设置怪物在屏幕最右侧生成\r\n        const uiTransform = monster.getComponent(UITransform);\r\n        monster.setPosition(cc.winSize.width * 0.9 + uiTransform.width / 2, Math.random() * cc.winSize.height);\r\n        // log(`Monster spawned at position: ${monster.position}`);\r\n    }\r\n}"]}