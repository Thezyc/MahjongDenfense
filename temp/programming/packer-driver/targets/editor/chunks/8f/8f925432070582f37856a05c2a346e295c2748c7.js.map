{"version":3,"sources":["file:///C:/Users/Administrator/MahjongDenfense/assets/scripts/HuPaiChecker.ts"],"names":["HuPaiChecker","constructor","tiles","feng","Array","fill","jian","wan","tong","tiao","setTiles","isHu","type","i","length","tempTiles","JSON","parse","stringify","isMentsuAll","isMentsu","tilesCopy","slice","every","count","checkQingYiSe","colorTypes","colorCount","color","some","hasNoZi","checkHunYiSe","hasZi","checkPengPengHu","tileCopy","hasPair","checkDuanYaoJiu","checkPingHu","totalMentsu","countShunzi","shunziCount","checkJiHu","getFanTypes","fanTypes","push","name","fan"],"mappings":"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","sourcesContent":["class HuPaiChecker {\r\n    private tiles: { [key: string]: number[] };\r\n\r\n    constructor() {\r\n        this.tiles = {\r\n            feng: new Array(4).fill(0),\r\n            jian: new Array(3).fill(0),\r\n            wan: new Array(9).fill(0),\r\n            tong: new Array(9).fill(0),\r\n            tiao: new Array(9).fill(0),\r\n        };\r\n    }\r\n\r\n    setTiles(tiles: { [key: string]: number[] }) {\r\n        this.tiles = tiles;\r\n    }\r\n\r\n    isHu(): boolean {\r\n        for (let type in this.tiles) {\r\n            for (let i = 0; i < this.tiles[type].length; i++) {\r\n                if (this.tiles[type][i] >= 2) {\r\n                    this.tiles[type][i] -= 2;\r\n                    let tempTiles = JSON.parse(JSON.stringify(this.tiles));\r\n                    if (this.isMentsuAll(tempTiles)) {\r\n                        this.tiles[type][i] += 2;\r\n                        return true;\r\n                    }\r\n                    this.tiles[type][i] += 2;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private isMentsuAll(tiles: { [key: string]: number[] }): boolean {\r\n        for (let type in tiles) {\r\n            if (!this.isMentsu(tiles[type])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private isMentsu(tiles: number[]): boolean {\r\n        let tilesCopy = tiles.slice();\r\n        for (let i = 0; i < tilesCopy.length; i++) {\r\n            if (tilesCopy[i] >= 3) {\r\n                tilesCopy[i] -= 3;\r\n                i--;\r\n                continue;\r\n            }\r\n            if (i + 2 < tilesCopy.length && tilesCopy[i] > 0 && tilesCopy[i + 1] > 0 && tilesCopy[i + 2] > 0) {\r\n                tilesCopy[i]--;\r\n                tilesCopy[i + 1]--;\r\n                tilesCopy[i + 2]--;\r\n                i--;\r\n                continue;\r\n            }\r\n        }\r\n        return tilesCopy.every(count => count === 0);\r\n    }\r\n\r\n    // 检测清一色\r\n    checkQingYiSe(): boolean {\r\n        const colorTypes = ['wan', 'tong', 'tiao'];\r\n        let colorCount = 0;\r\n        for (let color of colorTypes) {\r\n            if (this.tiles[color].some(count => count > 0)) {\r\n                colorCount++;\r\n            }\r\n        }\r\n        const hasNoZi = this.tiles['feng'].every(count => count === 0) && this.tiles['jian'].every(count => count === 0);\r\n        return colorCount === 1 && hasNoZi;\r\n    }\r\n\r\n    // 检测混一色\r\n    checkHunYiSe(): boolean {\r\n        const colorTypes = ['wan', 'tong', 'tiao'];\r\n        let colorCount = 0;\r\n        for (let color of colorTypes) {\r\n            if (this.tiles[color].some(count => count > 0)) {\r\n                colorCount++;\r\n            }\r\n        }\r\n        const hasZi = this.tiles['feng'].some(count => count > 0) || this.tiles['jian'].some(count => count > 0);\r\n        return colorCount === 1 && hasZi;\r\n    }\r\n\r\n    // 检测碰碰和\r\n    checkPengPengHu(): boolean {\r\n        for (let type in this.tiles) {\r\n            let tileCopy = [...this.tiles[type]];\r\n            let hasPair = false;\r\n            \r\n            for (let i = 0; i < tileCopy.length; i++) {\r\n                if (tileCopy[i] >= 2) {\r\n                    if (hasPair) {\r\n                        continue; // 如果已经有将牌，跳过多余的将牌\r\n                    }\r\n                    hasPair = true;\r\n                    tileCopy[i] -= 2; // 移除将牌\r\n                }\r\n            }\r\n\r\n            if (!tileCopy.every(count => count % 3 === 0)) {\r\n                return false; // 如果剩余的牌不能被3整除，返回false\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // 检测断幺九\r\n    checkDuanYaoJiu(): boolean {\r\n        for (let i = 0; i < 9; i++) {\r\n            if (i === 0 || i === 8) {\r\n                if (this.tiles['wan'][i] > 0 || this.tiles['tong'][i] > 0 || this.tiles['tiao'][i] > 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return this.tiles['feng'].every(count => count === 0) && this.tiles['jian'].every(count => count === 0);\r\n    }\r\n\r\n    // 检测平和\r\n    checkPingHu(): boolean {\r\n        let hasPair = false;\r\n        let totalMentsu = 0;\r\n\r\n        for (let type in this.tiles) {\r\n            let tileCopy = [...this.tiles[type]];\r\n            \r\n            for (let i = 0; i < tileCopy.length; i++) {\r\n                if (tileCopy[i] >= 2) {\r\n                    if (hasPair) {\r\n                        continue; // 忽略多余的将牌\r\n                    }\r\n                    hasPair = true;\r\n                    tileCopy[i] -= 2;\r\n                }\r\n            }\r\n\r\n            totalMentsu += this.countShunzi(tileCopy);\r\n        }\r\n\r\n        return hasPair && totalMentsu === 4;\r\n    }\r\n\r\n    private countShunzi(tiles: number[]): number {\r\n        let tilesCopy = tiles.slice();\r\n        let shunziCount = 0;\r\n\r\n        for (let i = 0; i < tilesCopy.length; i++) {\r\n            while (i + 2 < tilesCopy.length && tilesCopy[i] > 0 && tilesCopy[i + 1] > 0 && tilesCopy[i + 2] > 0) {\r\n                tilesCopy[i]--;\r\n                tilesCopy[i + 1]--;\r\n                tilesCopy[i + 2]--;\r\n                shunziCount++;\r\n            }\r\n        }\r\n        return shunziCount;\r\n    }\r\n\r\n    // 检测鸡胡\r\n    checkJiHu(): boolean {\r\n        return true; // 鸡胡默认返回true\r\n    }\r\n\r\n    // 获取满足条件的番种\r\n    getFanTypes(): { name: string, fan: number }[] {\r\n        const fanTypes = [];\r\n\r\n        if (this.checkQingYiSe()) {\r\n            fanTypes.push({ name: '清一色', fan: 24 });\r\n        }\r\n        if (this.checkHunYiSe()) {\r\n            fanTypes.push({ name: '混一色', fan: 6 });\r\n        }\r\n        if (this.checkPengPengHu()) {\r\n            fanTypes.push({ name: '碰碰和', fan: 6 });\r\n        }\r\n        if (this.checkDuanYaoJiu()) {\r\n            fanTypes.push({ name: '断幺九', fan: 2 });\r\n        }\r\n        if (this.checkPingHu()) {\r\n            fanTypes.push({ name: '平和', fan: 2 });\r\n        }\r\n\r\n        if (fanTypes.length === 0) {\r\n            fanTypes.push({ name: '鸡胡', fan: 1 });\r\n        }\r\n\r\n        return fanTypes;\r\n    }\r\n}\r\n\r\nexport { HuPaiChecker };"]}