{"version":3,"sources":["file:///C:/Users/Administrator/MahjongDenfense/assets/scripts/MahjongTile.ts"],"names":["_decorator","Component","Vec3","log","Input","UITransform","find","ccclass","property","MahjongTile","originalPosition","isDragging","offset","gridNodes","gameManager","gridNodeMap","Map","onLoad","node","setSiblingIndex","set","position","on","EventType","MOUSE_DOWN","onMouseDown","MOUSE_MOVE","onMouseMove","MOUSE_UP","onMouseUp","slotsNode","children","length","onDestroy","off","event","uiTransform","getComponent","localMousePos","convertToNodeSpaceAR","getUILocation","x","y","subtract","setPosition","add","tileCenter","convertToWorldSpaceAR","ZERO","closestGridNode","minDistance","Infinity","i","gridNode","gridTransform","gridCenter","getBoundingBoxToWorld","contains","distance","existingTile","get","existingTilePosition","getWorldPosition","setWorldPosition","setGameManager","raise","lower"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, log, EventMouse, Input, UITransform, director, find } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MahjongTile')\r\nexport class MahjongTile extends Component {\r\n    public originalPosition: Vec3 = new Vec3();\r\n    private isDragging: boolean = false;\r\n    private offset: Vec3 = new Vec3();\r\n    private gridNodes: Node[] = [];\r\n    private gameManager: Node = null;\r\n    private gridNodeMap: Map<Node, Node> = new Map(); // 用于记录格子和麻将的映射关系\r\n\r\n    onLoad() {\r\n        // 设置麻将的显示层级\r\n        this.node.setSiblingIndex(1000);\r\n\r\n        // 保存麻将牌的初始位置\r\n        this.originalPosition.set(this.node.position);\r\n\r\n        // 添加鼠标事件监听器\r\n        this.node.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);\r\n        this.node.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n        this.node.on(Input.EventType.MOUSE_UP, this.onMouseUp, this);\r\n\r\n        // 获取 Slots 节点\r\n        const slotsNode = find('Canvas/Slots');\r\n        if (slotsNode) {\r\n            this.gridNodes = slotsNode.children;\r\n            log(`Found ${this.gridNodes.length} slots`);\r\n        } else {\r\n            log('Slots node not found');\r\n        }\r\n    }\r\n\r\n    onDestroy() {\r\n        // 移除鼠标事件监听器\r\n        this.node.off(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);\r\n        this.node.off(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n        this.node.off(Input.EventType.MOUSE_UP, this.onMouseUp, this);\r\n    }\r\n\r\n    onMouseDown(event: EventMouse) {\r\n        this.isDragging = true;\r\n\r\n        // 计算鼠标点击位置与麻将牌节点位置的偏移量\r\n        const uiTransform = this.node.getComponent(UITransform);\r\n        if (uiTransform) {\r\n            const localMousePos = uiTransform.convertToNodeSpaceAR(new Vec3(event.getUILocation().x, event.getUILocation().y, 0));\r\n            this.offset = this.node.position.subtract(localMousePos);\r\n        }\r\n\r\n        // 当开始拖拽时，将麻将的显示层级提高\r\n        this.node.setSiblingIndex(2000);\r\n    }\r\n\r\n    onMouseMove(event: EventMouse) {\r\n        if (this.isDragging) {\r\n            // 更新麻将牌的位置\r\n            const uiTransform = this.node.getComponent(UITransform);\r\n            if (uiTransform) {\r\n                const localMousePos = uiTransform.convertToNodeSpaceAR(new Vec3(event.getUILocation().x, event.getUILocation().y, 0));\r\n                this.node.setPosition(localMousePos.add(this.offset));\r\n            }\r\n        }\r\n    }\r\n\r\n    onMouseUp(event: EventMouse) {\r\n        this.isDragging = false;\r\n\r\n        // 获取麻将牌的中心点\r\n        const tileCenter = this.node.getComponent(UITransform).convertToWorldSpaceAR(Vec3.ZERO);\r\n\r\n        // 检查是否在格子内\r\n        let closestGridNode = null;\r\n        let minDistance = Infinity;\r\n\r\n        for (let i = 0; i < this.gridNodes.length; i++) {\r\n            const gridNode = this.gridNodes[i];\r\n            const gridTransform = gridNode.getComponent(UITransform);\r\n            const gridCenter = gridTransform.convertToWorldSpaceAR(Vec3.ZERO);\r\n\r\n            // 判断麻将牌的中心点是否与格子的边界框相交\r\n            if (gridTransform.getBoundingBoxToWorld().contains(tileCenter)) {\r\n                // 计算麻将牌中心与格子中心的距离\r\n                const distance = tileCenter.subtract(gridCenter).length();\r\n                if (distance < minDistance) {\r\n                    minDistance = distance;\r\n                    closestGridNode = gridNode;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (closestGridNode) {\r\n            const existingTile = this.gridNodeMap.get(closestGridNode);\r\n            if (existingTile) {\r\n                // 如果格子中已有麻将，与当前麻将交换位置\r\n                const existingTilePosition = existingTile.getWorldPosition();\r\n                existingTile.setWorldPosition(this.node.getWorldPosition());\r\n                this.node.setWorldPosition(existingTilePosition);\r\n            } else {\r\n                // 将麻将牌放置在最近的格子中心\r\n                this.node.setWorldPosition(closestGridNode.getComponent(UITransform).convertToWorldSpaceAR(Vec3.ZERO));\r\n                this.gridNodeMap.set(closestGridNode, this.node);\r\n            }\r\n            this.node.setSiblingIndex(1000);\r\n        } else {\r\n            // 如果不在格子内，恢复到原始位置，并恢复正常的显示层级\r\n            this.node.setPosition(this.originalPosition);\r\n            this.node.setSiblingIndex(1000);\r\n        }\r\n    }\r\n\r\n    setGameManager(gameManager: Node) {\r\n        this.gameManager = gameManager;\r\n    }\r\n\r\n    raise() {\r\n        // this.node.setPosition(this.originalPosition.clone().add3f(0, 50, 0)); // 基于初始位置抬起\r\n        // this.isRaised = true;\r\n    }\r\n    \r\n    lower() {\r\n        // this.node.setPosition(this.originalPosition); // 恢复到初始位置\r\n        // this.isRaised = false;\r\n    }\r\n}"]}