{"version":3,"sources":["file:///Users/yc/Documents/MahjongDenfense/assets/scripts/MahjongTile.ts"],"names":["_decorator","Component","Vec3","log","Input","find","Vec2","input","ccclass","property","MahjongTile","originalPosition","isDragging","gridNodes","gameManager","draggedTile","onLoad","set","node","position","on","EventType","MOUSE_DOWN","onMouseDown","MOUSE_MOVE","onMouseMove","MOUSE_UP","onMouseUp","onGlobalMouseUp","gridsNode","children","length","onDestroy","off","currentDragging","event","forceEndDrag","tile","target","getWorldPosition","toString","worldPos","getUILocation","setWorldPosition","x","y","targetPos","targetGridNode","findNearestGrid","isGridOccupied","swapTileWithGrid","name","placeTileInGrid","returnToOriginalPosition","endDrag","setGameManager","setGridNodes","nearestGrid","minDistance","Number","MAX_VALUE","grid","gridPos","distance","gridNode","setParent","setPosition","ZERO","targetGrid","originalGrid","parent","occupiedTile","draggedTileScript","getComponent","occupiedTileScript"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, log, EventMouse, Input, UITransform, find, Vec2, input } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('MahjongTile')\nexport class MahjongTile extends Component {\n    public originalPosition: Vec3 = new Vec3();\n    private isDragging: boolean = false;\n    private gridNodes: Node[] = [];\n    private gameManager: Node = null;\n    private draggedTile: Node | null = null;\n\n    // 静态变量，用于全局记录当前正在拖拽的实例\n    private static currentDragging: MahjongTile | null = null;\n\n    onLoad() {\n        this.originalPosition.set(this.node.position);\n\n        // 本地事件监听\n        this.node.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);\n        this.node.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\n        this.node.on(Input.EventType.MOUSE_UP, this.onMouseUp, this);\n\n        // 使用 input 全局监听 MOUSE_UP 事件，确保在任意区域释放鼠标时都能触发拖拽结束\n        input.on(Input.EventType.MOUSE_UP, this.onGlobalMouseUp, this);\n\n        const gridsNode = find('Canvas/Grids');\n        if (gridsNode) {\n            this.gridNodes = gridsNode.children;\n            log(`Found ${this.gridNodes.length} grids`);\n        } else {\n            log('Grids node not found');\n        }\n    }\n\n    onDestroy() {\n        this.node.off(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);\n        this.node.off(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\n        this.node.off(Input.EventType.MOUSE_UP, this.onMouseUp, this);\n        input.off(Input.EventType.MOUSE_UP, this.onGlobalMouseUp, this);\n\n        // 如果当前实例是正在拖拽的实例，则置空\n        if (MahjongTile.currentDragging === this) {\n            MahjongTile.currentDragging = null;\n        }\n    }\n\n    onMouseDown(event: EventMouse) {\n        // 如果已有其他麻将正在拖拽，先结束它的拖拽操作\n        if (MahjongTile.currentDragging && MahjongTile.currentDragging !== this) {\n            MahjongTile.currentDragging.forceEndDrag();\n        }\n        \n        const tile = event.target as Node;\n        if (tile) {\n            this.draggedTile = tile;\n            // 记录麻将的原始世界位置\n            this.originalPosition.set(tile.getWorldPosition());\n            this.isDragging = true;\n            // 更新当前正在拖拽的实例\n            MahjongTile.currentDragging = this;\n            log(`选中麻将位置: ${this.originalPosition.toString()}`);\n        }\n    }\n\n    onMouseMove(event: EventMouse) {\n        if (this.isDragging && this.draggedTile) {\n            const worldPos = event.getUILocation();\n            this.draggedTile.setWorldPosition(new Vec3(worldPos.x, worldPos.y, 0));\n        }\n    }\n\n    onMouseUp(event: EventMouse) {\n        if (!this.draggedTile) return;\n        const targetPos = event.getUILocation();\n        let targetGridNode: Node | null = this.findNearestGrid(targetPos);\n        if (targetGridNode) {\n            if (this.isGridOccupied(targetGridNode)) {\n                this.swapTileWithGrid(targetGridNode);\n                log(`与格子 ${targetGridNode.name} 内的麻将进行交换`);\n            } else {\n                this.placeTileInGrid(targetGridNode);\n                log(`放置麻将到格子: ${targetGridNode.name}`);\n            }\n        } else {\n            this.returnToOriginalPosition();\n            log('未找到有效格子，返回原位置');\n        }\n        this.endDrag();\n    }\n\n    /**\n     * 全局 MOUSE_UP 回调，确保鼠标任意释放时都能重置拖拽状态\n     */\n    private onGlobalMouseUp(event: EventMouse) {\n        // 仅对当前正在拖拽的实例生效\n        if (this.isDragging) {\n            this.onMouseUp(event);\n        }\n    }\n\n    /**\n     * 强制结束拖拽，恢复到原始位置，并重置拖拽状态\n     */\n    public forceEndDrag() {\n        if (this.isDragging) {\n            this.returnToOriginalPosition();\n            this.endDrag();\n            log(`强制结束拖拽，麻将返回原位`);\n        }\n    }\n\n    /**\n     * 结束拖拽，清理状态\n     */\n    private endDrag() {\n        this.isDragging = false;\n        this.draggedTile = null;\n        if (MahjongTile.currentDragging === this) {\n            MahjongTile.currentDragging = null;\n        }\n    }\n\n    setGameManager(gameManager: Node) {\n        this.gameManager = gameManager;\n    }\n\n    setGridNodes(gridNodes: Node[]) {\n        this.gridNodes = gridNodes;\n    }\n\n    /**\n     * 找到最近的有效格子\n     */\n    private findNearestGrid(targetPos: Vec2): Node | null {\n        if (!this.gridNodes || this.gridNodes.length === 0) return null;\n        let nearestGrid: Node | null = null;\n        let minDistance = Number.MAX_VALUE;\n        for (const grid of this.gridNodes) {\n            const gridPos = grid.getWorldPosition();\n            const distance = Vec2.distance(\n                new Vec2(targetPos.x, targetPos.y),\n                new Vec2(gridPos.x, gridPos.y)\n            );\n            if (distance < minDistance && distance < 100) {\n                minDistance = distance;\n                nearestGrid = grid;\n            }\n        }\n        return nearestGrid;\n    }\n\n    /**\n     * 检查格子是否已被占用\n     */\n    private isGridOccupied(gridNode: Node): boolean {\n        return gridNode.children.length > 0 && \n               gridNode.children[0] !== this.draggedTile;\n    }\n\n    /**\n     * 将麻将放置到指定格子\n     */\n    private placeTileInGrid(gridNode: Node) {\n        if (!this.draggedTile) return;\n        this.draggedTile.setParent(gridNode, true);\n        this.draggedTile.setPosition(Vec3.ZERO);\n        this.originalPosition.set(this.draggedTile.getWorldPosition());\n    }\n\n    /**\n     * 返回原始位置\n     */\n    private returnToOriginalPosition() {\n        if (!this.draggedTile) return;\n        this.draggedTile.setWorldPosition(this.originalPosition);\n    }\n\n    /**\n     * 交换拖拽麻将与目标格子中已有麻将的位置\n     */\n    private swapTileWithGrid(targetGrid: Node) {\n        if (!this.draggedTile) return;\n        const originalGrid = this.draggedTile.parent;\n        if (!originalGrid) {\n            this.returnToOriginalPosition();\n            return;\n        }\n        const occupiedTile = targetGrid.children[0];\n        if (!occupiedTile) {\n            this.placeTileInGrid(targetGrid);\n            return;\n        }\n        this.draggedTile.setParent(targetGrid, true);\n        this.draggedTile.setPosition(Vec3.ZERO);\n        occupiedTile.setParent(originalGrid, true);\n        occupiedTile.setPosition(Vec3.ZERO);\n        const draggedTileScript = this.draggedTile.getComponent(MahjongTile);\n        if (draggedTileScript) {\n            draggedTileScript.originalPosition.set(this.draggedTile.getWorldPosition());\n        }\n        const occupiedTileScript = occupiedTile.getComponent(MahjongTile);\n        if (occupiedTileScript) {\n            occupiedTileScript.originalPosition.set(occupiedTile.getWorldPosition());\n        }\n    }\n}"]}