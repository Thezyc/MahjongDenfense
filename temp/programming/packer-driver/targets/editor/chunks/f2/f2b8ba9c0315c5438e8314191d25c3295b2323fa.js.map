{"version":3,"sources":["file:///Users/yc/Documents/MahjongDenfense/assets/scripts/MahjongTile.ts"],"names":["_decorator","Component","Vec3","log","Input","find","Vec2","ccclass","property","MahjongTile","originalPosition","isDragging","gridNodes","gameManager","draggedTile","onLoad","set","node","position","on","EventType","MOUSE_DOWN","onMouseDown","MOUSE_MOVE","onMouseMove","MOUSE_UP","onMouseUp","gridsNode","children","length","onDestroy","off","event","tile","target","getWorldPosition","toString","worldPos","getUILocation","setWorldPosition","x","y","targetPos","targetGridNode","findNearestGrid","isGridOccupied","swapTileWithGrid","name","placeTileInGrid","returnToOriginalPosition","setGameManager","setGridNodes","nearestGrid","minDistance","Number","MAX_VALUE","grid","gridPos","distance","gridNode","setParent","setPosition","ZERO","targetGrid","originalGrid","parent","occupiedTile","draggedTileScript","getComponent","occupiedTileScript"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, log, EventMouse, Input, UITransform, find, Vec2 } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('MahjongTile')\nexport class MahjongTile extends Component {\n    public originalPosition: Vec3 = new Vec3();\n    private isDragging: boolean = false;\n    private gridNodes: Node[] = [];\n    private gameManager: Node = null;\n    private draggedTile: Node | null = null;\n\n    onLoad() {\n        this.originalPosition.set(this.node.position);\n\n        this.node.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);\n        this.node.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\n        this.node.on(Input.EventType.MOUSE_UP, this.onMouseUp, this);\n\n        const gridsNode = find('Canvas/Grids');\n        if (gridsNode) {\n            this.gridNodes = gridsNode.children;\n            log(`Found ${this.gridNodes.length} grids`);\n        } else {\n            log('Grids node not found');\n        }\n    }\n\n    onDestroy() {\n        this.node.off(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);\n        this.node.off(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\n        this.node.off(Input.EventType.MOUSE_UP, this.onMouseUp, this);\n    }\n\n    onMouseDown(event: EventMouse) {\n        const tile = event.target as Node;\n        if (tile) {\n            this.draggedTile = tile;\n            // 记录麻将的初始世界位置，同时记录原有的父节点（原格子）\n            this.originalPosition.set(tile.getWorldPosition());\n            this.isDragging = true;\n\n            log(`选中麻将位置: ${this.originalPosition.toString()}`);\n        }\n    }\n\n    onMouseMove(event: EventMouse) {\n        if (this.isDragging && this.draggedTile) {\n            const worldPos = event.getUILocation();\n            this.draggedTile.setWorldPosition(new Vec3(worldPos.x, worldPos.y, 0));\n\n            // log(`MahjongTile onMouseMove: Dragging Position: ${this.draggedTile.getWorldPosition().toString()}`);\n        }\n    }\n\n    onMouseUp(event: EventMouse) {\n        if (!this.draggedTile) return;\n\n        const targetPos = event.getUILocation();\n        let targetGridNode: Node | null = this.findNearestGrid(targetPos);\n\n        // 判断鼠标释放位置的情况\n        if (targetGridNode) {\n            if (this.isGridOccupied(targetGridNode)) {\n                // 如果目标格子已被占用，则进行交换\n                this.swapTileWithGrid(targetGridNode);\n                log(`与格子 ${targetGridNode.name} 内的麻将进行交换`);\n            } else {\n                // 目标格子没有麻将，则正常放置\n                this.placeTileInGrid(targetGridNode);\n                log(`放置麻将到格子: ${targetGridNode.name}`);\n            }\n        } else {\n            this.returnToOriginalPosition();\n            log('未找到有效格子，返回原位置');\n        }\n\n        this.isDragging = false;\n        this.draggedTile = null;\n    }\n\n    setGameManager(gameManager: Node) {\n        this.gameManager = gameManager;\n    }\n\n    setGridNodes(gridNodes: Node[]) {\n        this.gridNodes = gridNodes;\n    }\n\n    // 新增辅助方法\n\n    /**\n     * 找到最近的有效格子\n     */\n    private findNearestGrid(targetPos: Vec2): Node | null {\n        if (!this.gridNodes || this.gridNodes.length === 0) return null;\n\n        let nearestGrid: Node | null = null;\n        let minDistance = Number.MAX_VALUE;\n\n        for (const grid of this.gridNodes) {\n            const gridPos = grid.getWorldPosition();\n            const distance = Vec2.distance(\n                new Vec2(targetPos.x, targetPos.y),\n                new Vec2(gridPos.x, gridPos.y)\n            );\n\n            // 设置一个最大有效距离（比如100像素）\n            if (distance < minDistance && distance < 100) {\n                minDistance = distance;\n                nearestGrid = grid;\n            }\n        }\n\n        return nearestGrid;\n    }\n\n    /**\n     * 检查格子是否已被占用\n     */\n    private isGridOccupied(gridNode: Node): boolean {\n        // 检查格子是否已经有子节点（不包括当前拖动的麻将）\n        return gridNode.children.length > 0 && \n               gridNode.children[0] !== this.draggedTile;\n    }\n\n    /**\n     * 将麻将放置到指定格子\n     */\n    private placeTileInGrid(gridNode: Node) {\n        if (!this.draggedTile) return;\n\n        // 设置父节点为目标格子并对齐中心\n        this.draggedTile.setParent(gridNode, true);\n        this.draggedTile.setPosition(Vec3.ZERO);\n        // 更新原始位置\n        this.originalPosition.set(this.draggedTile.getWorldPosition());\n    }\n\n    /**\n     * 返回原始位置\n     */\n    private returnToOriginalPosition() {\n        if (!this.draggedTile) return;\n\n        // 使用世界坐标系设置位置\n        this.draggedTile.setWorldPosition(this.originalPosition);\n    }\n\n    /**\n     * 交换拖拽麻将与目标格子中已有麻将的位置\n     */\n    private swapTileWithGrid(targetGrid: Node) {\n        if (!this.draggedTile) return;\n\n        // 获取拖拽麻将原来的格子（父节点）\n        const originalGrid = this.draggedTile.parent;\n        if (!originalGrid) {\n            // 如果原格子不存在，则无法交换，回到原位置\n            this.returnToOriginalPosition();\n            return;\n        }\n\n        // 获取目标格子中已存在的麻将\n        const occupiedTile = targetGrid.children[0];\n        if (!occupiedTile) {\n            // 这里不应该发生，因为isGridOccupied已经检查过\n            this.placeTileInGrid(targetGrid);\n            return;\n        }\n\n        // 交换步骤：\n        // 1. 将拖拽麻将移动到目标格子\n        this.draggedTile.setParent(targetGrid, true);\n        this.draggedTile.setPosition(Vec3.ZERO);\n\n        // 2. 将目标格子原有的麻将移动到拖拽麻将的原格子\n        occupiedTile.setParent(originalGrid, true);\n        occupiedTile.setPosition(Vec3.ZERO);\n\n        // 3. 更新各自的原始位置记录\n        const draggedTileScript = this.draggedTile.getComponent(MahjongTile);\n        if (draggedTileScript) {\n            draggedTileScript.originalPosition.set(this.draggedTile.getWorldPosition());\n        }\n        const occupiedTileScript = occupiedTile.getComponent(MahjongTile);\n        if (occupiedTileScript) {\n            occupiedTileScript.originalPosition.set(occupiedTile.getWorldPosition());\n        }\n    }\n}"]}